---
title: "barcharts"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# [**Fix stacked bar charts in seconds**](https://www.youtube.com/watch?v=3exV7ZjarxA&t=280s)

```{r}
library(tidyverse)
library(scales)
```

```{r}
mpg_2008 <- mpg |> 
  filter(year == 2008, 
         !(class %in% c('2seater', 'minivan')), 
  ) |> 
  mutate(
    class = case_when(
      class %in% c('compact', 'subcompact') ~ '(Sub-)Compact',
      class %in% c('pickup', 'suv') ~ 'Pickup/SUV', 
      TRUE ~ str_to_title(class)
    ), 
    manufacturer = str_to_title(manufacturer), 
    manufacturer = fct_infreq(manufacturer) |> fct_rev()
  )
```

```{r}
colors <- thematic::okabe_ito(4)
split_plot <- mpg_2008 |> 
  ggplot(
    aes(y = manufacturer, fill = class)) + 
  geom_bar() + 
  geom_vline(xintercept = 0) +
  theme_minimal(
    base_size = 20, base_family = 'Source Sans Pro'
  ) + 
  scale_fill_manual(values = colors[1:3]) + 
  facet_wrap(vars(class)) + 
  labs(
    x = element_blank(), 
    y = element_blank()
  ) + 
  theme(panel.grid.minor = element_blank(), 
        panel.grid.major.y = element_blank(),
legend.position = 'none')
```

```{r}
# lets create a total value barchart
total_plot <- mpg_2008 |> 
  ggplot(
    aes(y = manufacturer)) + 
  geom_bar( fill = colors[4]) + 
  geom_vline(xintercept = 0) +
  theme_minimal(
    base_size = 20, base_family = 'Source Sans Pro'
  ) + 
  
  facet_wrap(vars('Total')) + 
  labs(
    x = element_blank(), 
    y = element_blank()
  ) + 
  theme(panel.grid.minor = element_blank(), 
        panel.grid.major.y = element_blank(),
legend.position = 'none') + 
  scale_y_discrete(labels = element_blank())

```

```{r}
library(patchwork)

split_plot + total_plot + 
  plot_layout(widths = c(3.1, 1)) +
  plot_annotation(
    title =  'Cars in the data set by manufacturer and class', 
    theme = theme(
      title = element_text(
        size = 20, family = "Merriweather"
      )
    )
  )
```

# [**How to Make a Diverging Bar Chart in R**](https://www.youtube.com/watch?v=uR2m7rzRqYw&t=106s)

## Creating some fake data

```{r}
set.seed(1234)

school_quality <- tibble(
  id = seq(1, 300, 1), 
  school = rep(c('Sabin', 'Vernon', 'Faubion', 'Irvington', 'Alameda', 'Beverly Cleary'), 50), 
  opinion = sample(c('Very bad', 'Bad', 'Good', 'Very good'), 300, replace = TRUE)
)
school_quality 
```

```{r}
school_quality_summary <- school_quality |> 
  group_by(school, opinion) |> 
    count(name = "n_answers") |> 
    group_by(school) |> 
    mutate(percent_answers = n_answers/sum(n_answers)) |> 
    ungroup() |> 
    mutate(percent_answers_label = percent(percent_answers, accuracy = 1))
school_quality_summary 
```

```{r}
school_quality_summary |> 
  ggplot(aes(x = school, y = percent_answers, fill = opinion)) + 
  geom_col() + 
  geom_text(aes(label = percent_answers_label),
            position = position_stack(vjust = 0.5),
                color = 'white', 
                fontface = 'bold') + 
  coord_flip() + 
  scale_x_discrete() +
  scale_fill_viridis_d() + 
  labs(
    x = NULL, 
    title = "How good is the education at your school", 
    fill = NULL
  ) + 
  theme_minimal() + 
  theme(axis.text.x = element_blank(), 
        axis.title.x = element_blank(), 
        panel.grid = element_blank(), 
        legend.position = 'top')
```

## Basic Diverging Bar chart

```{r}
school_quality_summary_diverging <- school_quality_summary |> 
  mutate(percent_answers = if_else(opinion %in% c('Very good', 'Good'), percent_answers, -percent_answers), 
         percent_answers_label = percent(percent_answers, accuracy = 1))
school_quality_summary_diverging
```

now we can make a basic diverging bar chart

```{r}
school_quality_summary_diverging |> 
  ggplot(aes(y = school, 
             x = percent_answers, 
             fill = opinion)) + 
  geom_col() + 
  geom_text(
    aes(label= percent_answers_label), 
    position = position_stack(vjust = 0.5), 
    color = 'white', 
    fontface = 'bold'
  ) +
 
  scale_fill_viridis_d() + 
  labs(
    x = NULL, 
    title = "How good is the education at your school", 
    fill = NULL
  ) + 
  theme_minimal() + 
  theme(axis.text.x = element_blank(), 
        axis.title.x = element_blank(), 
        panel.grid = element_blank(), 
        legend.position = 'top')
```

## Positive/Negative Labels

Lets change the negative label to just positive label, because that what it is.

```{r}
school_quality_summary_diverging_good_labels <- school_quality_summary_diverging |> 
  mutate(percent_answers = abs(percent_answers), 
         percent_answers_label = percent(percent_answers, accuracy = 1)) 
  school_quality_summary_diverging_good_labels
```

```{r}
school_quality_summary_diverging_good_labels |> 
ggplot(aes(y = school, 
             x = percent_answers, 
             fill = opinion)) + 
  geom_col() + 
  geom_text(
    aes(label= percent_answers_label), 
    position = position_stack(vjust = 0.5), 
    color = 'white', 
    fontface = 'bold'
  ) +
 
  scale_fill_viridis_d() + 
  labs(
    x = NULL, 
    title = "How good is the education at your school", 
    fill = NULL
  ) + 
  theme_minimal() + 
  theme(axis.text.x = element_blank(), 
        axis.title.x = element_blank(), 
        panel.grid = element_blank(), 
        legend.position = 'top')
```

## Lets order the bar in the alphabetical order

```{r}
school_quality_summary_diverging_right_order <- school_quality_summary_diverging_good_labels |> 
  mutate(opinion = fct_relevel(opinion, 'Very bad', 'Bad', 'Good', 'Very good'),
    opinion = fct_rev(opinion))
school_quality_summary_diverging_right_order
```

```{r}
school_quality_summary_diverging_right_order |> 
ggplot(aes(y = school, 
             x = percent_answers, 
             fill = opinion)) + 
  geom_col() + 
  geom_text(
    aes(label= percent_answers_label), 
    position = position_stack(vjust = 0.5), 
    color = 'white', 
    fontface = 'bold'
  ) +
 
  scale_fill_viridis_d() + 
  labs(
    x = NULL, 
    title = "How good is the education at your school", 
    fill = NULL
  ) + 
  theme_minimal() + 
  theme(axis.text.x = element_blank(), 
        axis.title.x = element_blank(), 
        panel.grid = element_blank(), 
        legend.position = 'top')
```

Now lets align the legend currently it says bad, very bad, good, very good

```{r}
school_quality_summary_diverging_right_order |> 
ggplot(aes(y = school, 
             x = percent_answers, 
             fill = opinion)) + 
  geom_col() + 
  geom_text(
    aes(label= percent_answers_label), 
    position = position_stack(vjust = 0.5), 
    color = 'white', 
    fontface = 'bold'
  ) +
 scale_fill_viridis_d(breaks = c('Very bad', 'Bad', 'Good', 'Very good')) + #breaks argument just makes the legend order match
  labs(
    x = NULL, 
    title = "How good is the education at your school", 
    fill = NULL
  ) + 
  theme_minimal() + 
  theme(axis.text.x = element_blank(), 
        axis.title.x = element_blank(), 
        panel.grid = element_blank(), 
        legend.position = 'top')
```

## Improve Colors

```{r}
school_quality_summary_diverging_right_order |> 
ggplot(aes(y = school, 
             x = percent_answers, 
             fill = opinion)) + 
  geom_col() + 
  geom_text(
    aes(label= percent_answers_label), 
    position = position_stack(vjust = 0.5), 
    color = 'white', 
    fontface = 'bold'
  ) +
 scale_fill_manual(breaks = c('Very bad', 'Bad', 'Good', 'Very good'), 
                   values = c(
                     "Very bad" = "darkorange3", 
                     "Bad" = "orange", 
                     "Good" = "deepskyblue", 
                     "Very good" = "deepskyblue4"
                   )) + 
  labs(
    x = NULL, 
    title = "How good is the education at your school", 
    fill = NULL
  ) + 
  theme_minimal() + 
  theme(axis.text.x = element_blank(), 
        axis.title.x = element_blank(), 
        panel.grid = element_blank(), 
        legend.position = 'top')
```

# [**A Quick How-to on Labelling Bar Graphs in ggplot2**](https://www.cedricscherer.com/2021/07/05/a-quick-how-to-on-labelling-bar-graphs-in-ggplot2/#how-to-1)

## **Data Preparation with the tidyverse**

First, let's prepare the data for the bar chart. We are going to use the data from 2008 only and summarize the number of car model variants in the data per manufacturer. We also adjust the manufacturer labels and order them as they should appear in the final plot. Here are some notes on some of the functions used:

-   `count()` from the [**`{dplyr}` package**](https://dplyr.tidyverse.org/) is a wrapper of `group_by(var) |> summarize(n = n()))`. It allows you to sort the values which is useful here because we want to order the bars based on their value in our visualization.

-   `str_to_title()` from the [**`{stringr}` package**](https://stringr.tidyverse.org/) is a quick way to capitalize labels.

-   `fct_lump()`, `fct_inorder()`, `fct_rev()`, and `fct_relevel()` are all from the [**`{forcats}` package**](https://forcats.tidyverse.org/) that provides helpers for reordering factor levels.

    -   First, we group all manufacturers together that do not belong to the top 10 with `fct_lump()`.

    -   Since our data set is sorted in descending order thanks to `count()`, we first order them by appearance with `fct_inorder()`.

    -   Afterwards, we reverse them with `fct_rev()`(so that the bar with the highest value is on top).

    -   Finally, we move the category "Other" to the end (as the first level) with `fct_relevel()`.

```{r}
mpg_sum <- mpg|> 
  filter(year == 2008) |> 
  mutate(manufacturer = str_to_title(manufacturer), 
         manufacturer = fct_lump(manufacturer, n = 10)) |> 
  count(manufacturer, sort = TRUE) |> 
  mutate(manufacturer = fct_inorder(manufacturer), 
         manufacturer = fct_rev(manufacturer), 
         manufacturer = fct_relevel(manufacturer, "Other", after = 0)) 


  
```

Let's check if our factor reordering worked:

```{r}
levels(mpg_sum$manufacturer)
```

Keep in mind that we have reversed the ordering since `{ggplot2}` plots factors from bottom to top when being mapped to `y`.

## **Data Visualization with ggplot2**

```{r}
ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  ## draw bars
  geom_col(fill = "gray70") +
  ## change plot appearance
  theme_minimal()
```

##### **How to Calculate the Percentage Values**

We can go both routes, either creating the labels first or on the fly. However, creating the bars and labels with the help of `geom_bar()` and `stat_summary(geom = "text")` is a bit more difficult and I prefer to build a temporary data frame for that task. The benefit is that you always can control and check the output, i.e. the sorting of the factor and the formatting of the labels.

Here are two ways how to quickly add the percentage labels to your data set. The percentage can be easily calculated by dividing the number of cars per manufacturer `n` by the total number of cars `sum(n)`, times 100. `sprintf()` is a handy function to format text and variables. `sprintf()` allows you to include for example leading spaces (not important here but useful for left-aligned labels) and zero digits (e.g. `12.0%` instead of `12%` which is useful here). The syntax is likely confusing for you because it relies on the C library of the same name. Here, we want to retrieve 4 characters in total, 1 of the to the right of the decimal. See [**here**](https://www.php.net/manual/en/function.sprintf.php) for more about the parameters one can use. Using `paste0`, or alternatively the `glue()` function from the [**`{glue}` package**](https://glue.tidyverse.org/), we add the percentage symbol to that number.

```{r}
mpg_sum <- mpg_sum |> 
  ## add percentage label with `sprintf()`
  dplyr::mutate(perc = paste0(sprintf("%4.1f", n / sum(n) * 100), "%"))

mpg_sum
```

One could also use the `percent()` function from the `{scales}` package. The accuracy determines the number of digits (here `.1`) and we can similarly add the leading white space by setting `trim` to `FALSE`.

```{r}
mpg_sum |> 
  ## add percentage label with `scales::percent()`
  dplyr::mutate(perc = scales::percent(n / sum(n), accuracy = .1, trim = FALSE))
```

So let's add the prepared percentage label to our bar graph with `geom_text()`:

```{r}
mpg_sum |> 
  ggplot(aes(x = n, y = manufacturer)) +
  geom_col(fill ='grey70') + 
  geom_text(aes(label = perc)) + 
  theme_minimal()
```

And in case you want to add some more description to one of the bars, you can use an `if_else()` (or an `ifelse()`) statement like this:

```{r}
mpg_sum <- mpg_sum |> 
  mutate(perc = percent(n/sum(n), accuracy = .1, trim = FALSE)) |> 
  mutate( perc = if_else(row_number() == 1, paste(perc, "of all car models"), perc)
  )
         

mpg_sum |> 
  ggplot(aes(x = n, y = manufacturer)) + 
  geom_col(fill = 'grey70') + 
  geom_text(aes(label = perc)) + 
  # make sure the labels doesn't get cut
  scale_x_continuous(limits = c(NA, 24)) + 
  theme_minimal()
  
```

#### **How to Position the Percentage Labels Inside the Bars**

The `geom_text()` function comes with arguments that help you to align and position text labels:

-   `hjust` and `vjust`: the horizontal and vertical justification to align text.

-   `nudge_x` and `nudge_y`: the horizontal and vertical adjustment to offset text from points.

To put the labels inside, we first need to right-align the labels with `hjust = 1`. We also add some negative horizontal adjustment via `nudge_x = -.5` to add some spacing between the end of the bar and the label.

```{r}
ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = "gray70") +
  geom_text(
    aes(label = perc), 
    ## make labels left-aligned
    hjust = 1, nudge_x = -.5
  ) +
  theme_minimal()
```

In case you want to put the next to the bars, you often need to adjust the plot margin and/or the limits to avoid that the labels are cut off. The drawback of using limits is that you have to define them manually. Thus, I prefer to use the first approach. You can make sure that labels are not truncated by the panel by adding `clip = "off"` to any coordinate system.

```{r}
ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = "gray70") +
  geom_text(
    aes(label = perc), 
    hjust = 0, nudge_x = .5
  ) +
  ## make sure labels doesn't get cut, part 1
  coord_cartesian(clip = "off") +
  theme_minimal() +
  ## make sure labels doesn't get cut, part 2
  theme(plot.margin = margin(r = 120))
```

Increase space on the right via `scale_x_continuous(limits)`:

```{r}
ggplot(mpg_sum, aes(x = n, y = manufacturer)) +
  geom_col(fill = "gray70") +
  geom_text(
    aes(label = perc), 
    hjust = 0, nudge_x = .5
  ) +
  ## make sure labels doesn't get cut
  scale_x_continuous(limits = c(NA, 30)) +
  theme_minimal()
```

#### **How to Color the Bars Using Different Colors**

Again, there are many ways how to add custom colors. As the first approach, we create the color palette as a vector based on our summarized data set. Let's pick some colors that are similar to the original plot we started with:

```{r}
## create color palette based on input data
pal <- c(   "gray85",   rep("gray70", length(mpg_sum$manufacturer) - 4),    "coral2", "mediumpurple1", "goldenrod1" )
```

```         
```

In this approach, we create a vector that holds the colors for each of the levels---from the lowest bar to the bar with the most values. We can use the `length` of the manufacturer column for all non-highlighted bars and subtract the number of bars we want to highlight. Here, we have a colorful top 3 and a lighter "Other" category. The vector can then be used in combination with `scale_color|fill_manual()`.

Now, we can use the custom palette to color each bar by mapping `manufacturer` to the bar's `fill` property and by passing the `pals` vector to `scale_fill_manual()`:

```{r}
ggplot(mpg_sum, aes(x = n, y = manufacturer, 
                    fill = manufacturer)) +
  geom_col() +
  geom_text(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5
  ) +
  ## add custom colors
  scale_fill_manual(values = pal, guide = "none") +
  theme_minimal()
```

One could also add the color to the data set and map the fill to that column and use `scale_fill_identity()`.

```{r}
mpg_sum <-
  mpg_sum |> 
  mutate(
    color = case_when(
      row_number() == 1 ~ "goldenrod1",
      row_number() == 2 ~ "mediumpurple1",
      row_number() == 3 ~ "coral2",
      manufacturer == "Other" ~ "gray85",
      ## all others should be gray
      TRUE ~ "gray70"
    )
  )

ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5
  ) +
  ## add custom colors
  scale_fill_identity(guide = "none") +
  theme_minimal()
```

This approach is less error-prone since the color is tied to the properties of the data. Thus, in case we update the data, the colors are still applied correctly.

#### **Polish Your Plot**

Finally, we can adjust the visual appearance a bit, most importantly reduce redundancy. Since I only want to keep the labels on the y axis, I use `theme_void()` and add the axis text afterwards again. Here, I use a custom font for both the axis text and the percentage labels and adjust the font size. (I am not going to cover it here but in case you want to include custom fonts, check the [**`{systemfonts}` package**](https://github.com/r-lib/systemfonts).)

By default, `{ggplot2}` adds some padding to each axis which results in labels that are a bit off. To decrease the distance between the y axis text and the bars, adjust the expansion argument `expand` in the according scale, here `scale_x_continuous()`. I also add some white space around the plot by setting a `plot.margin` which is of type `element_rect()`.

```{r}
ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5,
    size = 4, fontface = "bold", family = "Fira Sans"
  ) +
  ## reduce spacing between labels and bars
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = "none") +
  ## get rid of all elements except y axis labels + adjust plot margin
  theme_void() +
  theme(axis.text.y = element_text(size = 14, hjust = 1, family = "Fira Sans"),
        plot.margin = margin(rep(15, 4)))
```

#### **Alternatives Improving the Accessibility**

*Update:* Some feedback suggested that placing labels inside the bars can hinder accessibility due to contrast issues. I fully agree, so I want to present some approaches to decrease that barrier without the need to increase the white space towards the right when placing labels next to the bars.

#### **Version with label boxes instead of pure text:** We can replace `geom_text()` with `geom_label()` which adds a box around each label. While it doesn't look as good, the high contrast of black labels on white ground maximizes readability.

```{r}
ggplot(mpg_sum, aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_label(
    aes(label = perc), 
    hjust = 1, nudge_x = -.5,
    size = 4, fontface = "bold", family = "Fira Sans",
    ## turn into white box without outline
    fill = "white", label.size = 0
  ) +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = "none") +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = "Fira Sans"),
    plot.margin = margin(rep(15, 4))
  )
```

#### **Version with different label placement**

I like the idea of placing only those labels inside that mess up the aspect ratio due to their length. In our case, that's only the first entry. We can place the labels differently by mapping a new created column `place` to the `hjust` argument. Since we cannot map a variable to `nudge_x`, we cannot use it to offset the labels. To add some spacing, I simply add some white space to the begin and end of each percentage label.

```{r}
mpg_sum |> 
  mutate(
    ## set justification based on data 
    ## so that only the first label is placed inside
    place = if_else(row_number() == 1, 1, 0),
    ## add some spacing to labels since we cant use nudge_x anymore
    perc = paste(" ", perc, " ")
  ) |> 
  ggplot(aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc, hjust = place), 
    size = 4, fontface = "bold", family = "Fira Sans"
  ) +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = "none") +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = "Fira Sans"),
    plot.margin = margin(rep(15, 4))
  )
```

#### **Version placing the long label not at the top**

 We could also add the "of all car models" bit to a bar that is short enough to ensure that the label does not extend beyond the usual width of the plot. In our example, the second bar in our case fulfills this condition:

```{r}
mpg_sum |> 
  ## overwrite old percentage labels
  mutate(
    perc = scales::percent(n / sum(n), accuracy = .1, trim = FALSE),
    perc = if_else(row_number() == 2, paste(perc, "of all car models"), perc)
  ) |> 
  ggplot(aes(x = n, y = manufacturer, fill = color)) +
  geom_col() +
  geom_text(
    aes(label = perc,), 
    hjust = 0, nudge_x = .5,
    size = 4, fontface = "bold", family = "Fira Sans"
  ) +
  ## make sure labels doesn't get cut, part 1
  coord_cartesian(clip = "off") +
  scale_x_continuous(expand = c(.01, .01)) +
  scale_fill_identity(guide = "none") +
  theme_void() +
  theme(
    axis.text.y = element_text(size = 14, hjust = 1, family = "Fira Sans"),
    ## make sure labels doesn't get cut, part 2
    plot.margin = margin(15, 30, 15, 15)
  )
```

Of course, you could add that information also to the title, figure caption or simply leave it out. But that's not what the request was about 🤷

# [**Yet Another How-to on Labelling Bar Graphs in ggplot2**](https://www.cedricscherer.com/2023/10/26/yet-another-how-to-on-labelling-bar-graphs-in-ggplot2/)

## **Data Preparation**

I am using the `diamonds` data set from the `{ggplot2}` package to generate shares of diamonds for five different categories describing the quality of the cut. In a first step, I am calculating the shares per quality and turn the categories into a factor ordered by that metric.

```{r}

diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, prop))
```

There are multiple other ways to calculate the shares, including `diamonds |> mutate(n = n()) |> summarize(prop = n() / unique(n), .by = cut)`. Instead of using the experimental `.by` argument you can also group your data first with `group_by(cut)` before summarizing per cut quality.

The last step is not needed in our example case here as the ranking by shares follows the defined order of the cut qualities. However, in most other cases you likely have to sort your categories on your own.

## **Create a Basic Bar Chart**

Now, I can easily pass the summarized data set to `ggplot()` and create a simple horizontal bar graph:

```{r}
diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, prop)) |> 
  ggplot(aes(prop, cut)) +
  geom_col()
```

Alternatively, you can transform the complete data set on the fly instead of calculating shares first:

```{r}
ggplot(diamonds, aes(y = cut, x = after_stat(count / sum(count)))) +
  geom_bar()
```

The same default horizontal bar chart, this time created with `geom_bar()` and `after_stat()`.

## **Style the Visualization**

If you know me a bit, you know that before moving on I **have to** modify the theme and fix the grid lines (read: remove them all together in this case).

Also, I am modifying the x axis range and labels. Instead of showing proportions, I decide to show percentages (0-100). Also, to follow good practice I am adding the percentage label to the axis using `label_percent()` from the `{scales}` package. I am also removing the padding on the left and right of the bars and adjust the limits so that the 40% label is shown as well.

```{r}
theme_set(theme_minimal(base_family = "Spline Sans"))
theme_update(
  panel.grid.minor = element_blank(),
  panel.grid.major = element_blank(),
  axis.line.x = element_line(color = "grey80", linewidth = .4),
  axis.ticks.x = element_line(color = "grey80", linewidth = .4),
  axis.title.y = element_blank(),
  plot.margin = margin(10, 15, 10, 15)
)

diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, prop)) |> 
  ggplot(aes(prop, cut)) +
  geom_col() +
  scale_x_continuous(
    expand = c(0, 0), limits = c(0, .4),
    labels = scales::label_percent(),
    name = "Proportion"
  ) 
```

## **Place Category Labels on the Top**

The approach I take to now to move the labels to the top of the bars is: faceting!

There are multiple options including placing the labels with geom_text and shifting them upwards. But by far the fastest way (and also likely the one that breaks last when the number of bars changes) is using the facet functionality of `{ggplot2}`.

```{r}
diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, prop)) |> 
  ggplot(aes(prop, cut)) +
  geom_col() +
  facet_wrap(~ cut) +
  scale_x_continuous(
    expand = c(0, 0), limits = c(0, .4),
    labels = scales::label_percent(),
  )
```

Creating small multiples based on the variable mapped to the y axis leads to a set of mostly empty panels with redundant labels by default.

It doesn't work "out of the box", however. But that's a quick fix if you know about the `ncol` and the `scales` arguments in the `facet_wrap()` function! The trick is that we force all small multiples in a single column (so that bars share a common baseline again) by setting `ncol = 1`. By default, the axis ranges are kept constant across small multiples. By setting `scales = "free_y"` we can *free* the axis range which removes redundant, empty groups and all the resulting white space.

```{r}
diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, -prop)) |> 
  ggplot(aes(prop, cut)) +
  geom_col() +
  facet_wrap(~ cut, ncol = 1, scales = "free_y") +
  scale_x_continuous(
    name = "Proportion", expand = c(0, 0), 
    limits = c(0, .4), labels = scales::label_percent()
  )
```

Now, our facets looks like a regular bar chart. However, we have redundant labels which we remove in the next step.

Note that we also have to flip the order of our categories as now they're ordered top to bottom, not bottom to top anymore.

The final step is cleaning up the labels. First, let's remove the category names on the y axis by passing `guide = "none"` in `scale_y_discrete()`.

To modify the new labels, the so-called strip texts, we address the text element `strip.text` via `theme()`. The margin of zero on the left ensures that, together with the horizontal justification (`hjust = 0`) that the strip text labels are full left-aligned with the baseline of the bars. The small margin at the top and the bottom ensure that the labels are not clipped (e.g. that the descender of y is shown completely).

```{r}
diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, -prop)) |> 
  ggplot(aes(prop, cut)) +
  geom_col() +
  facet_wrap(~ cut, ncol = 1, scales = "free_y") +
  scale_x_continuous(
    name = "Proportion", expand = c(0, 0), 
    limits = c(0, .4), labels = scales::label_percent()
  ) +
  scale_y_discrete(guide = "none") +
  theme(strip.text = element_text(
    hjust = 0, margin = margin(1, 0, 1, 0), 
    size = rel(1.1), face = "bold"
  ))
```

The polished new y axis labels, originally strip text of small multiples, replace the original axis labels.

To add some spacing between the last bar and the axis line, one can adjust the vertical padding of each panel by passing `expansion(add = c(.8, .6)` to the `expand` argument in `scale_y_discrete()`.

```{r}
diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, -prop)) |> 
  ggplot(aes(prop, cut)) +
  geom_col() +
  facet_wrap(~ cut, ncol = 1, scales = "free_y") +
  scale_x_continuous(
    name = "Proportion", expand = c(0, 0), 
    limits = c(0, .4), labels = scales::label_percent()
  ) +
  scale_y_discrete(
    guide = "none", expand = expansion(add = c(.8, .6))
  ) +
  theme(strip.text = element_text(
    hjust = 0, margin = margin(1, 0, 1, 0), 
    size = rel(1.1), face = "bold"
  ))
```

The final version with polished category labels by adjusting the strip text of the facets.

## **Bonus: Style the Bars**

Let's merge this new approach with some of the [**tricks from my previous blog post**](https://www.cedricscherer.com/2021/07/05/a-quick-how-to-on-labelling-bar-graphs-in-ggplot2/). We add direct labels and highlight the top-ranked category.

## **Highlight Top-Ranked Category**

By mapping the cut variable to fill, bars would be colored by categories. To color only the first, top ranked bar, I am making use of the rank which is equal to the factor level. Thus, mapping the fill to `as.numeric(cut) == 1)` returns `TRUE` for "Ideal" and `FALSE` otherwise. To customize the fill colors, we add `scale_fill_manual()` to pass a vector of two custom colors. As we don't need a legend, we also set `guide = "none"`.

```{r}
p <- 
  diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, -prop)) |> 
  ggplot(aes(prop, cut)) +
  geom_col(aes(fill = as.numeric(cut) == 1)) +
  facet_wrap(~ cut, ncol = 1, scales = "free_y") +
  scale_x_continuous(
    name = "Proportion", expand = c(0, 0), 
    limits = c(0, .4), labels = scales::label_percent()
  ) +
  scale_y_discrete(guide = "none", expand = expansion(add = c(.8, .6))) +
  scale_fill_manual(values = c("grey50", "#1D785A"), guide = "none") +
  theme(strip.text = element_text(
    hjust = 0, margin = margin(1, 0, 1, 0), 
    size = rel(1.1), face = "bold"
  ))

p
```

## **Add Percentages as Direct Labels**

Similarly, we can pass an expression to `color` and `hjust` inside the `geom_text()` component that we use to add the direct labels. As `TRUE` is encoded as `1`, all group that have a share lower than 5% are right-aligned while all others are left-aligned (as `FALSE` = `0`). To move the labels a bit more inside and outside, respectively, I am cheating by adding some spaces before and after the label.

```{r}
p +
  geom_text(
    aes(label = paste0("  ", sprintf("%2.1f", prop * 100), "%  "), 
        color = prop > .05, hjust = prop > .05),
    size = 4, fontface = "bold", family = "Spline Sans"
  ) +
  scale_color_manual(values = c("black", "white"), guide = "none")
```

Now, the bars are labelled directly including a rule that automatically places the labels inside the bars as long as they are wide enough to fit the label.

Alternatively, you can pass the value for `hjust` directly by using an `ifelse`or `if_else` condition: `hjust = if_else(prop > .05, 1.2, -.2)`:

```{r}
p +
  geom_text(
    aes(label = paste0(sprintf("%2.1f", prop * 100), "%"), 
        color = prop > .05, hjust = if_else(prop > .05, 1.2, -.2)),
    size = 4, fontface = "bold", family = "Spline Sans"
  ) +
  scale_color_manual(values = c("black", "white"), guide = "none")
```

The same logic applies when we want to control the text color, which is recommended here to increase the contrast. With the final `scale_color_manual()` I change the text color to white in case the label is placed inside the bar and black otherwise.

Another way to style the labels would be `scales::label_percent(accuracy = .1, prefix = " ", suffix = "% ")(prop)` (or make use of the superseded `scales::percent()`) but that's rather long and also not that easy to remember.

One could of course also remove the x axis as the values are now shown as direct labels.

```{r}
p +
  geom_text(
    aes(label = paste0("  ", sprintf("%2.1f", prop * 100), "%  "), 
        color = prop > .05, hjust = prop > .05),
    size = 4, fontface = "bold", family = "Spline Sans"
  ) +
  scale_x_continuous(guide = "none", name = NULL, expand = c(0, 0)) +
  scale_color_manual(values = c("black", "white"), guide = "none")
```

A version in which the x axis has been removed as it shows redundant information.

## **Alternative Approach**

Here is an approach using `geom_text()`. The trick here is to (i) reduce the width (read: height in our case) of the bars to allow for space for the labels and (ii) add the labels with `geom_text()` in combination with a custom `vjust` or `nudge_y` setting.

```{r}
diamonds |> 
  summarize(prop = n() / nrow(diamonds), .by = cut) |> 
  mutate(cut = forcats::fct_reorder(cut, prop)) |> 
  ggplot(aes(prop, cut)) +
  geom_col(width = .5) +
  geom_text(
    aes(label = cut, x = 0),
    family = "Spline Sans", fontface = "bold",
    hjust = 0, vjust = -1.7, size = 4.5
  ) +
  scale_x_continuous(
    expand = c(0, 0), limits = c(0, .4),
    labels = scales::label_percent(),
    name = "Proportion"
  ) +
  scale_y_discrete(guide = "none")
```

An example using `geom_text()` to place the category labels in combination with `vjust`.

That's a great solution, too. I see some potential issues coming up here, for example problems in case the labels become larger (can be fixed by removing the clipping and adding some margin) or the number of bars increases (and that may be especially a problem in an automated workflow). In the latter case, the space between bars may become too small and/or the placement of the labels, adjusted via `vjust` or `nudge_y`, is not perfectly above the bars anymore.

## **Conclusion**

To illustrate the different behavior of the two approaches, let's run the exact same codes on a new data set with more categories:

```{r}
p1 <- 
  mpg |> 
  filter(year == "2008") |> 
  summarize(prop = n() / nrow(mpg), .by = manufacturer) |> 
  mutate(manufacturer = forcats::fct_reorder(stringr::str_to_title(manufacturer), -prop)) |> 
  ggplot(aes(prop, manufacturer)) +
  geom_col() +
  facet_wrap(~ manufacturer, ncol = 1, scales = "free_y") +
  scale_x_continuous(
    name = "Proportion", expand = c(0, 0), 
    limits = c(0, .1), labels = scales::label_percent()
  ) +
  scale_y_discrete(
    guide = "none", expand = expansion(add = c(.8, .6))
  ) +
  theme(strip.text = element_text(
    hjust = 0, margin = margin(1, 0, 1, 0), 
    size = rel(1.1), face = "bold"
  ))

p2 <- 
  mpg |> 
  filter(year == "2008") |> 
  summarize(prop = n() / nrow(mpg), .by = manufacturer) |> 
  mutate(manufacturer = forcats::fct_reorder(stringr::str_to_title(manufacturer), prop)) |> 
  ggplot(aes(prop, manufacturer)) +
  geom_col(width = .5) +
  geom_text(
    aes(label = manufacturer, x = 0),
    family = "Spline Sans", fontface = "bold",
    hjust = 0, vjust = -1.7, size = 4.5
  ) +
  scale_x_continuous(
    name = "Proportion", expand = c(0, 0), 
    limits = c(0, .1), labels = scales::label_percent()
  ) +
  scale_y_discrete(guide = "none")

library(patchwork)
p1 + p2
```

Applying both codes to a different data set illustrates nicely the differences of the two approaches to place labels on top. The facet approach (left) ensures that labels are placed above, while the bars get thinner. The geom approach (right) uses a fixed bar width and thus the labels overlap at some point.

Both approaches have their pros and cons. In circumstances, where you can tweak the exact setting of bar widths, font sizes, and vertical justification, the `geom_text()` approach might be easier to set up.

Using the `facet_wrap()` approach ensures that the labels are always above the bars and that the labels are not clipped by the panel or plot border. This is especially powerful in case the data changes and charts need to be updated without any further modifications. Or if you want to apply a function to multiple data sets without the need to include further arguments to modify the widths and spacing. At the same time, the thinner bars make it more difficult to place labels inside the bars. However, the same issue would pop up when adjusting the widths and font sizes in the `geom_text()` example.

Finally, I should note that also the facet approach will break at some point: if the figure height is not sufficient, no bars are visible at all. But scaling the figure height based on the number of categories is something one can easy automate as well.
